
    }
}

var setup = function() {
    canvas = document.getElementById("canvas");
    ctx = canvas.getContext("2d");
    canvas.onmousemove = getMousePosition;
    canvas.onmousedown = mouseDown;
    canvas.onmouseup = mouseUp;
    loopTimer = setInterval(loop, frameDelay);
}
var setBallSpeed=function(ball){
    ball.fx = -0.5 * ball.Cd * ball.A * ball.rho * ball.velocity.x * ball.velocity.x * ball.velocity.x / Math.abs(ball.velocity.x);
    ball.fy = -0.5 * ball.Cd * ball.A * ball.rho * ball.velocity.y * ball.velocity.y * ball.velocity.y / Math.abs(ball.velocity.y);
}
var ballShouldStop=function(ball){
    if ((ball.velocity.x<0.5 && ball.velocity.x>0) && (ball.velocity.y<0.5 && ball.velocity.y>0)||(ball.velocity.y>-0.5 && ball.velocity.y<0))
    {
        return true;
    }
    else if ((ball.velocity.x>-0.5 && ball.velocity.x<0) && (ball.velocity.y<0.5 && ball.velocity.y>0)||(ball.velocity.y>-0.5 && ball.velocity.y<0)) 
    {
        return true;
    }
    return false;
}
var stopBall= function(ball){
    ball.velocity.x=0;
    ball.velocity.y=0;
    ball.shootable=true;
}
var setBallLoopInfo=function(ball){
    ball.fx = (isNaN(ball.fx) ? 0 : ball.fx);
    ball.fy = (isNaN(ball.fy) ? 0 : ball.fy);
    ball.ax = ball.fx / ball.mass;
    ball.ay = ball.fy / ball.mass;
    ball.velocity.x += ball.ax*frameRate;
    ball.velocity.y += ball.ay*frameRate;
    ball.position.x += ball.velocity.x*frameRate*100;
    ball.position.y += ball.velocity.y*frameRate*100;
}
var wallCollision=function(ball){
    if (ball.position.x<=30||ball.position.x>=1020)
    {
        ball.velocity.x = ball.velocity.x * (-1);
    }
    if (ball.position.y<=30||ball.position.y>=1020)
    {
        ball.velocity.y = ball.velocity.y * (-1);
    }
}
var hole= function (ball){
    if (ball.position.x>325+ball.radius && ball.position.x<725-ball.radius && ball.position.y>325+ball.radius && ball.position.y<725-ball.radius)
    {
        console.log("dead");
        return true;
    }
    return false;
}
var loop = function(){
    if ( ! mouse.isDown && shotInRange) 
    {
        if (player1)
        {   
            setBallSpeed(ball1);
            wallCollision(ball1);
            if (hole(ball1))
            {
                console.log ("sucess");
            }

            if (ballShouldStop(ball1))
            {
                stopBall(ball1);
                shotInRange=false;
                player1=false;
            }  
            setBallLoopInfo(ball1);
        }
        else if (!player1 && shotInRange)
        {
            setBallSpeed(ball2);
            wallCollision(ball2);
            if (ballShouldStop(ball2))
            {
                stopBall(ball2);
                shotInRange=false;
                player1=true;
            }
            setBallLoopInfo(ball2);
        }
            //ball collision
           // if(ball1.position.x-ball2.position.x< 20 && ball1.position.x-ball2.position.x >0 || ball1.position.x - ball2.position.x > -20 && ball1.position.x - ball2.position.x < 0 )
           // {
           //      ball1.velocity.y = ball1.velocity.y * (-1);
           //      ball2.velocity.y = ball2.velocity.y * (-1);
           //      console.log("ball1:",ball1.position,"ball2:",ball2.position)
           // }
           // if (ball1.position.y - ball2.position.y > -20 && ball1.position.y - ball2.position.y < 0 || ball1.position.y-ball2.position.y<20 && ball1.position.y-ball2.position.y >0)
           // {
           //      ball1.velocity.y = ball1.velocity.y * (-1);
           //      ball2.velocity.y = ball2.velocity.y * (-1);
           //      console.log("ball1:",ball1.position,"ball2:",ball2.position)
           // }
}
var drawBall=function(ball){
    ctx.beginPath();
    ctx.arc(ball.position.x, ball.position.y, ball.radius, 0, Math.PI*2, true);
    ctx.closePath();
    ctx.fill();
}  
ctx.clearRect(0,0,width,height);
ctx.save();
//ctx.translate(ball1.position.x, ball1.position.y);
ctx.fillStyle = 'red';
drawBall(ball1);
ctx.fillStyle ='blue';
drawBall(ball2); 
ctx.restore();
var lineToMouse= function (ball){
    ctx.beginPath();
    ctx.moveTo(ball.position.x, ball.position.y);
    if (ball.shootable){//once ball shot no longer shootable
        if (mouseInRange(ball))
        {
            ctx.lineTo(mouse.x, mouse.y);
            ball.line.x=mouse.x;
            ball.line.y=mouse.y;
            shotInRange=true;

        }
        else 
        {   
            ctx.lineTo(ball.line.x, ball.line.y);
        }
    ctx.lineWidth = 10;
    ctx.stroke();
    ctx.closePath();
    }
}
if (mouse.isDown)
{
    if (player1)
    {
        ctx.strokeStyle = 'red';
        lineToMouse(ball1);
    }
    else
    {
        ctx.strokeStyle = 'blue';
        lineToMouse(ball2);
    }
}

}

setup();
</script>
</html>
