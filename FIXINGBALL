<html>
<canvas id="canvas" height="400" width="500"
style="border:1px solid #000000;"> </canvas>

<script type="text/javascript"></script>

<script>
console.log("code not broken whooopie!")// Gravity 
// Gravity 
var width = 500;//width of bg
var height = 400;//height of bg
var canvas = ctx = false;
var frameRate = 1/40; // S
var frameDelay = frameRate * 400; // ms
var loopTimer = false;
var player1=true;
var newpath1=false;
var newpath2=false;
var ball = {
    mass: 0.1, //kg
    radius: 15, // 1px = 1cm  // Size of ball
    restitution: -0.7,// Effects speed 
    velocity: {x: 0, y: 0}
};

var ball1 = Object.create(ball);
ball1.position = {x: 100, y: 100};
ball1.line = {x: 0, y: 0};

var ball2 = Object.create(ball);
ball2.line = {x: 0, y:0 };
ball2.position = {x:300, y: 100};

var drawBall = function(ball){
    ctx.drawImage(ball.base_image, ball.position.x, ball.position.y);
};

//ball1.img = "src= 'ball.png'";
function clearCanvasRedraw (){
   // console.log('ball1', ball1 ,'ball2 is', ball2);
   ctx.clearRect(ball1.position.x,ball1.position.y,canvas.width,canvas.height);
   drawBall(ball1);
   drawBall(ball2);
}
make_base();

function make_base()
{
  ball1.base_image = new Image();
  ball1.base_image.src = 'ball.png';
  ball2.base_image = new Image();
  ball2.base_image.src = 'BlueBall.png';
  ball1.base_image.onload = function(){
   ctx.drawImage(ball1.base_image, ball1.position.x, ball1.position.y);
}
ball2.base_image.onload = function() {
    ctx.drawImage(ball2.base_image, ball2.position.x,ball2.position.y);
}
}


var Cd = 0.4;  // EFFECTS SLOW DOWN SPEED
var rho = 15; // kg / m^3 EFFECTS SLOW DOWN SPEED
var A = Math.PI * ball.radius * ball.radius / (10000); // m^2
//var ag = 9.81;  // m / s^2
var mouse = {x: 0, y: 0, isDown: false};

function getMousePosition(e) {
    mouse.x = e.pageX - canvas.offsetLeft;
    mouse.y = e.pageY - canvas.offsetTop;
}

var mouseDown = function(e) {
    if (e.which == 1) {
        getMousePosition(e);
        mouse.isDown = true;
    }
}
var mouseUp = function(e) { 
    if (e.which == 1) {
        mouse.isDown = false;
        ball1.velocity.y = (ball1.position.y - mouse.y) /10;
        ball1.velocity.x = (ball1.position.x - mouse.x) / 10;
        //player1=!player1;
    }
}

var setup = function() {
    canvas = document.getElementById("canvas");
    ctx = canvas.getContext("2d");
    ctx.translate(ball1.position.x, ball1.position.y);
    canvas.onmousemove = getMousePosition;
    canvas.onmousedown = mouseDown;
    canvas.onmouseup = mouseUp;
    loopTimer = setInterval(loop, frameDelay);
}
var shouldDrawSlingshot = function(){
    if (mouse.isDown && player1) {
        //console.log("mouse:",mouse, "ballpos:",ball1.position);
    console.log(mouse)
    } 
    if (mouse.x-ball1.position.x<200 && mouse.x-ball1.position.x>-200 && mouse.y-ball1.position.y<200 && mouse.y-ball1.position.y>-200)
            /* If mouse within ball1 proxmity*/
    {
            console.log("hi");
            newpath1=true;
            return true;
    }
     return false;
}
var drawSlingshot =function(){
    clearCanvasRedraw();
    ctx.beginPath();
    ctx.moveTo(ball1.position.x, ball1.position.y);
    ctx.lineTo(mouse.x-50, mouse.y-50);
    ctx.lineWidth=5;
    ctx.stroke();
    ctx.closePath();
}
var loop = function() {
     if ( ! mouse.isDown) {
   var Fx = -0.5 * Cd * A * rho * ball1.velocity.x * ball1.velocity.x * ball1.velocity.x / Math.abs(ball1.velocity.x);
            var Fy = -0.5 * Cd * A * rho * ball1.velocity.y * ball1.velocity.y * ball1.velocity.y / Math.abs(ball1.velocity.y);
            if ((ball1.velocity.x<0.1 && ball1.velocity.x>0) && (ball1.velocity.y<0.1 && ball1.velocity.y>0)||(ball1.velocity.y>-0.1 && ball1.velocity.y<0)){
                ball1.velocity.x=0;
                ball1.velocity.y=0;
            }
            if ((ball1.velocity.x>-0.1 && ball1.velocity.x<0) && (ball1.velocity.y<0.1 && ball1.velocity.y>0)||(ball1.velocity.y>-0.1 && ball1.velocity.y<0)){
                ball1.velocity.x=0;
                ball1.velocity.y=0;
            }
      Fx = (isNaN(Fx) ? 0 : Fx);
            Fy = (isNaN(Fy) ? 0 : Fy);

            // Calculate acceleration ( F = ma )
            var ax = Fx / ball.mass;
            var ay = Fy / ball.mass;
     ball1.velocity.x += ax*frameRate;
     ball1.velocity.y += ay*frameRate;

            // Integrate to get position
            ball1.position.x += ball1.velocity.x*frameRate*100;
            ball1.position.y += ball1.velocity.y*frameRate*100;
}

    // Bounce off Walls
    
    ctx.translate(ball1.position.x, ball1.position.y);

    // Draw the slingshot
    
            if (shouldDrawSlingshot===true)
            {
                while(mouseDown){
                    drawSlingshot();
                    ball1.line.x=mouse.x;
                    ball1.line.y=mouse.y;
                    clearCanvasRedraw();
                    newpath1=false;
                
            }
            if (mouseUp){
                drawBall();
                clearCanvasRedraw();
            }

           else
        {
            newpath1=false;
            ctx.lineTo(ball1.line.x, ball1.line.y);

        }
    if (mouse.isDown && !player1) {

      if (mouse.x-ball2.position.x<100 && mouse.x-ball2.position.x>-100 && mouse.y-ball2.position.y<100 && mouse.y-ball2.position.y>-100)
            
        {
            newpath2=true;

            if (newpath2===true)
            {
                console.log(newpath2);
                clearCanvasRedraw();
                ctx.beginPath();
                ctx.moveTo(ball2.position.x, ball2.position.y);
                ctx.lineTo(mouse.x, mouse.y);
                ctx.lineWidth=5;
                ctx.stroke();
                ctx.closePath();
                ball2.line.x=mouse.x;
                ball2.line.y=mouse.y;
                newpath2=false;
            }  


        }
        else
        {
            newpath2=false;
            ctx.lineTo(ball2.line.x, ball2.line.y);

        }

    }

}
setup();
</script>
</html>
