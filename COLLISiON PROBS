<html>
<head>
</head>
<body id="body"> </body>
<!-- <link rel="stylesheet" type="text/css" media="screen" href="HRGame.css"> -->
<canvas id="canvas" height="960" width="960"> </canvas>
<style type="text/css" media="screen">
        canvas, img {display: block; margin: 1em auto; border: 1px solid black;}
        #canvas {
            background-image: url(plate9.png);
            /*background-color: rgb(117, 67, 54);*/
          /*background-image: url(wood1.jpg);*/
        }

        #body {
            background-image: url(wood1.jpg);
        }

</style>
<script>

var width = 960;//width of bg
var height = 980;//height of bg
var canvas = ctx = false;
var frameRate = 1/40; // 
var frameDelay = frameRate * 400; // ms
var loopTimer = false;
var player1=true;
var shotInRange=false;
function createBall(x, y){
     var ball = {
        mass: 0.1, //kg
        radius: 25, // 1px = 1cm  // Size of ball
        restitution: -0.7, // Effects speed 
        line: {},
        velocity: {x: 0, y: 0},
        Cd: 0.4,
        rho: 1,
        A: Math.PI * 30 /* ball radius*/* 30 /* ball radius*// (10000),
        fx:{},
        fy:{},
        ax:{},
        shootable: true
    };
    ball.position = {x: x, y: y}; // starting position // start speed
    return ball;    
}

 var ball1 = createBall(310, 250);
 var ball2 = createBall(710, 710);
 var mouse = {x: 0, y: 0, isDown: false};
 var phi =  Math.pow(Math.cos((ball1.position.x * ball2.position.x) + (ball1.position.y * ball2.position.y) / Math.sqrt(Math.pow(ball1.position.x, 2) + Math.pow(ball1.position.y , 2)) + Math.sqrt(Math.pow(ball2.position.x, 2) + Math.pow(ball2.position.y, 2))), -1);
 var centerHole = {x: 470, y: 500};

function getMousePosition(e) {
    mouse.x = e.pageX - canvas.offsetLeft;
    mouse.y = e.pageY - canvas.offsetTop;
    // console.log(mouse)
}
var mouseDown = function(e,ball) {
    if (e.which == 1)
    {
        getMousePosition(e);
        mouse.isDown = true;
    }
}
var launchBall = function(ball){
    ball.velocity.y = (ball.position.y - mouse.y) /10;
    ball.velocity.x = (ball.position.x - mouse.x) / 10;
}
var mousexInRange = function (ball)
{
    if (mouse.x-ball.position.x<180 && mouse.x-ball.position.x>-180)
    {
        return true;
    }
    return false;
}
var mouseyInRange = function (ball)
{
    if (mouse.y-ball.position.y<180 && mouse.y-ball.position.y>-180)
    {
        return true;
    }
    return false;
}
var mouseInRange = function (ball)
{
    if (mouseyInRange(ball) && mousexInRange(ball))
    {
        return true;
    }
    return false;
}
var mouseUp = function(e,ball) { 
    if (e.which == 1) 
    {
        mouse.isDown = false;
        if (player1 && ball1.shootable && shotInRange)
        {
            launchBall(ball1);
            ball1.shootable=false;
        }
        else if (!player1 && ball2.shootable && shotInRange)
        {
            launchBall(ball2);
            ball2.shootable=false;
        } 
    }
}
var xTouching = function (ball1,ball2){
    if ((ball1.position.x-ball2.position.x<= 51 && ball1.position.x-ball2.position.x >=0) || (ball1.position.x - ball2.position.x >= -50 && ball1.position.x - ball2.position.x <= 0))
    {
        return true;
    }
return false;
}
var yTouching = function (ball1,ball2){
    if  ((ball1.position.y - ball2.position.y >= -50 && ball1.position.y - ball2.position.y <= 0) || (ball1.position.y-ball2.position.y<=50 && ball1.position.y-ball2.position.y >=0))
    {
        return true;
    }
    return false;
}

var touching = function(ball1, ball2) {
    if(Math.abs(Math.sqrt(ball1.position.x*ball1.position.x+ball1.position.y*ball1.position.y)-Math.sqrt(ball2.position.x*ball2.position.x+ball2.position.y*ball2.position.y)) <= 50) {
        return true;
    }
}

collisionState = false;
console.log(collisionState);

var ballCollision = function() {
    //console.log(ball1,ball2)
    // if(xTouching(ball1,ball2) && yTouching(ball1,ball2) &&collisionState===false)
    if(xTouching(ball1,ball2) && yTouching(ball1,ball2))
    {
        if(collisionState===false){
            console.log(collisionState);
            manage_bounce(ball1,ball2);
            // Math.pow(Math.cos((ball1.position.x * ball2.position.x) + (ball1.position.y * ball2.position.y) / Math.sqrt(Math.pow(ball1.position.x, 2) + Math.pow(ball1.position.y , 2)) + Math.sqrt(Math.pow(ball2.position.x, 2) + Math.pow(ball2.position.y, 2))), -1);
            console.log("It touches.");
            collisionState=true;
            console.log(collisionState);
        }
    } 
    else 
    {
        collisionState=false;
        console.log(collisionState)
    }
}

function manage_bounce(ball1, ball2) {
    if (ball1.velocity.x>0 || ball1.velocity.y>0)
    {
        dx = ball1.position.x-ball2.position.x;
        dy = ball1.position.y-ball2.position.y;
        collisionision_angle = Math.atan2(dy, dx);
        magnitude_1 = Math.sqrt((ball1.velocity.x*ball1.velocity.x)+(ball1.velocity.y*ball1.velocity.y));
        magnitude_2 = Math.sqrt((ball2.velocity.x*ball2.velocity.x)+(ball2.velocity.y*ball2.velocity.y));
        direction_1 = Math.atan2(ball1.velocity.y, ball1.velocity.x);
        direction_2 = Math.atan2(ball2.velocity.y, ball2.velocity.x);
        new_xspeed_1 = magnitude_1*Math.cos(direction_2-collisionision_angle);
        new_yspeed_1 = magnitude_1*Math.sin(direction_2-collisionision_angle);
        new_xspeed_2 = magnitude_2*Math.cos(direction_1-collisionision_angle);
        new_yspeed_2 = magnitude_2*Math.sin(direction_1-collisionision_angle);
        final_xspeed_1 = 1;
        final_xspeed_2 = ((2*ball1.mass)*new_xspeed_2)/(2*ball1.mass);
        final_yspeed_1 = 1;
        final_yspeed_2 = ((2*ball1.mass)*new_xspeed_2)/(2*ball1.mass);
        ball1.velocity.x = Math.cos(collisionision_angle)*final_xspeed_1+Math.cos(collisionision_angle+Math.PI/2)*final_yspeed_1;
        ball1.velocity.y = Math.sin(collisionision_angle)*final_xspeed_1+Math.sin(collisionision_angle+Math.PI/2)*final_yspeed_1;
        ball2.velocity.x = Math.cos(collisionision_angle)*final_xspeed_2+Math.cos(collisionision_angle+Math.PI/2)*final_yspeed_2;
        ball2.velocity.y = Math.sin(collisionision_angle)*final_xspeed_2+Math.sin(collisionision_angle+Math.PI/2)*final_yspeed_2;
    }
        if (ball2.velocity.x>0 || ball2.velocity.y>0)
    {
        dx = ball1.position.x-ball2.position.x;
        dy = ball1.position.y-ball2.position.y;
        collisionision_angle = Math.atan2(dy, dx);
        magnitude_1 = Math.sqrt((ball1.velocity.x*ball1.velocity.x)+(ball1.velocity.y*ball1.velocity.y));
        magnitude_2 = Math.sqrt((ball2.velocity.x*ball2.velocity.x)+(ball2.velocity.y*ball2.velocity.y));
        direction_1 = Math.atan2(ball1.velocity.y, ball1.velocity.x);
        direction_2 = Math.atan2(ball2.velocity.y, ball2.velocity.x);
        new_xspeed_1 = magnitude_1*Math.cos(direction_2-collisionision_angle);
        new_yspeed_1 = magnitude_1*Math.sin(direction_2-collisionision_angle);
        new_xspeed_2 = magnitude_2*Math.cos(direction_1-collisionision_angle);
        new_yspeed_2 = magnitude_2*Math.sin(direction_1-collisionision_angle);
        final_xspeed_1 = 1;
        final_xspeed_2 = ((2*ball1.mass)*new_xspeed_2)/(2*ball1.mass);
        final_yspeed_1 = 1;
        final_yspeed_2 = ((2*ball1.mass)*new_xspeed_2)/(2*ball1.mass);
        ball1.velocity.x = Math.cos(collisionision_angle)*final_xspeed_1+Math.cos(collisionision_angle+Math.PI/2)*final_yspeed_1;
        ball1.velocity.y = Math.sin(collisionision_angle)*final_xspeed_1+Math.sin(collisionision_angle+Math.PI/2)*final_yspeed_1;
        ball2.velocity.x = Math.cos(collisionision_angle)*final_xspeed_2+Math.cos(collisionision_angle+Math.PI/2)*final_yspeed_2;
        ball2.velocity.y = Math.sin(collisionision_angle)*final_xspeed_2+Math.sin(collisionision_angle+Math.PI/2)*final_yspeed_2;
    }

}


var setup = function() {
    canvas = document.getElementById("canvas");
    ctx = canvas.getContext("2d");
    canvas.onmousemove = getMousePosition;
    canvas.onmousedown = mouseDown;
    canvas.onmouseup = mouseUp;
    loopTimer = setInterval(loop, frameDelay);
}
var setBallSpeed=function(ball){
    ball.fx = -0.65 * ball.Cd * ball.A * ball.rho * ball.velocity.x * ball.velocity.x * ball.velocity.x / Math.abs(ball.velocity.x);
    ball.fy = -0.65 * ball.Cd * ball.A * ball.rho * ball.velocity.y * ball.velocity.y * ball.velocity.y / Math.abs(ball.velocity.y);
}
var ballShouldStop=function(ball){
    if ((ball.velocity.x<0.5 && ball.velocity.x>0) && (ball.velocity.y<0.5 && ball.velocity.y>0)||(ball.velocity.y>-0.5 && ball.velocity.y<0))
    {
        return true;
    }
    else if ((ball.velocity.x>-0.5 && ball.velocity.x<0) && (ball.velocity.y<0.5 && ball.velocity.y>0)||(ball.velocity.y>-0.5 && ball.velocity.y<0)) 
    {
        return true;
    }
    return false;
}
var stopBall= function(ball){
    ball.velocity.x=0;
    ball.velocity.y=0;
    ball.shootable=true;
}
var setBallLoopInfo=function(ball){
    ball.fx = (isNaN(ball.fx) ? 0 : ball.fx);
    ball.fy = (isNaN(ball.fy) ? 0 : ball.fy);
    ball.ax = ball.fx / ball.mass;
    ball.ay = ball.fy / ball.mass;
    ball.velocity.x += ball.ax*frameRate;
    ball.velocity.y += ball.ay*frameRate;
    ball.position.x += ball.velocity.x*frameRate*100;
    ball.position.y += ball.velocity.y*frameRate*100;
}
var wallCollision=function(ball){
    if (ball.position.x<=30||ball.position.x>= 935)
    {
        ball.velocity.x = ball.velocity.x * (-1);
    }
    if (ball.position.y<=30||ball.position.y>=935)
    {
        ball.velocity.y = ball.velocity.y * (-1);
    }
}
 var hole= function (ball){
    if ((Math.abs(centerHole.x - ball.position.x < 133)) && (Math.abs(centerHole.y - ball.position.y < 140)))
   {
       console.log("dead");
       ball.radius = 18;
        return true;
    }
     return false;
 }
var loop = function(){
    if ( ! mouse.isDown && shotInRange) 
    {
        if (player1)
        {   
            setBallSpeed(ball1);
            wallCollision(ball1);
            // if (hole(ball1))
            // {
            //     console.log ("sucessball1");
            //     if (ball1.velocity>0.5)
            //     {
            //         ball1.velocity/10;
            //     }
            // }

            if (ballShouldStop(ball1))
            {
                stopBall(ball1);
                shotInRange=false;
                player1=false;
            }  
            setBallLoopInfo(ball1);
        }
        else if (!player1 && shotInRange)
        {
            setBallSpeed(ball2);
            wallCollision(ball2);
            // if (hole(ball2))
            // {
            //     console.log ("sucessball2");
            //     if (ball2.velocity>0.5)
            //     {
            //         ball2.velocity/10;
            //     }
            // }

            if (ballShouldStop(ball2))
            {
                stopBall(ball2);
                shotInRange=false;
                player1=true;
            }
            setBallLoopInfo(ball2);
        }
        ballCollision();
    
            //ball collision
         // if((ball1.position.x-ball2.position.x< 20 && ball1.position.x-ball2.position.x >0 || ball1.position.x - ball2.position.x > -20 && ball1.position.x - ball2.position.x < 0) && (ball1.position.y - ball2.position.y > -20 && ball1.position.y - ball2.position.y < 0 || ball1.position.y-ball2.position.y<20 && ball1.position.y-ball2.position.y >0))
         //   {
         //        ballCollision();
         //   }
           // if (ball1.position.y - ball2.position.y > -20 && ball1.position.y - ball2.position.y < 0 || ball1.position.y-ball2.position.y<20 && ball1.position.y-ball2.position.y >0)
           // {
           //      ballCollision();
           // }
}

           
var drawBall=function(ball){
    ctx.beginPath();
    ctx.arc(ball.position.x, ball.position.y, ball.radius, 0, Math.PI*2, true);
    ctx.closePath();
    ctx.fill();
}  
ctx.clearRect(0,0,width,height);
ctx.save();
//ctx.translate(ball1.position.x, ball1.position.y);
ctx.fillStyle = 'red';
drawBall(ball1);
ctx.fillStyle ='blue';
drawBall(ball2); 
ctx.restore();

var lineToMouse= function (ball){
    ctx.beginPath();
    ctx.moveTo(ball.position.x, ball.position.y);
    if (ball.shootable){//once ball shot no longer shootable
        if (mousexInRange(ball) && mouseyInRange(ball))
        {
            ctx.lineTo(mouse.x, mouse.y);
            ball.line.x=mouse.x;
            ball.line.y=mouse.y;
            shotInRange=true;

        }
        else if (mousexInRange(ball) && !mouseyInRange(ball))
        {
            ctx.lineTo(mouse.x, ball.line.y);
            ball.line.x=mouse.x;
        }
        else if (!mousexInRange(ball) && mouseyInRange(ball))
        {
            ctx.lineTo(ball.line.x, mouse.y);
            ball.line.y=mouse.y;
        }
        else 
        {   
            ctx.lineTo(ball.line.x, ball.line.y);
        }
    ctx.lineWidth = 10;
    ctx.stroke();
    ctx.closePath();
    }
}
if (mouse.isDown)
{
    if (player1)
    {
        ctx.strokeStyle = 'red';
        lineToMouse(ball1);
    }
    else
    {
        ctx.strokeStyle = 'blue';
        lineToMouse(ball2);
    }
}

}

setup();
</script>
</html>
